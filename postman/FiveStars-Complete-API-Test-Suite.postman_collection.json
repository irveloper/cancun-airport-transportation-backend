{
	"info": {
		"_postman_id": "fivestars-complete-api-suite-v2",
		"name": "FiveStars Complete API Test Suite - Updated",
		"description": "Comprehensive API testing suite with ALL quote types, complete booking management, one-step booking+payment flow, Stripe integration, auto-increment IDs, comprehensive rate coverage, default/seasonal rate fallbacks, and complete validation testing. Import this to test the entire FiveStars API with real working examples including booking and payment processing.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "complete-suite-2025-v2"
	},
	"item": [
		{
			"name": "🏥 Health Check",
			"item": [
				{
					"name": "API Health Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('API is healthy', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.services.database).to.equal('connected');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/health",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "health"]
						}
					}
				}
			]
		},
		{
			"name": "💰 Quote Management - ALL TYPES",
			"item": [
				{
					"name": "📋 All Quote Types Overview",
					"request": {
						"method": "GET",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/quote?service_type=round-trip&from_location_id=1&to_location_id=5&pax=4&date=2025-11-15",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "quote"],
							"query": [
								{"key": "service_type", "value": "round-trip", "description": "Available: round-trip, one-way, hotel-to-hotel, arrival, departure"},
								{"key": "from_location_id", "value": "1", "description": "Beach Palace Cancun (Auto-increment ID)"},
								{"key": "to_location_id", "value": "5", "description": "Adhara Hacienda Cancun (Different zone)"},
								{"key": "pax", "value": "4", "description": "Number of passengers (1-50)"},
								{"key": "date", "value": "2025-11-15", "description": "Service date (YYYY-MM-DD) - Regular pricing"}
							]
						}
					}
				},
				{
					"name": "✈️ Round Trip Quotes",
					"item": [
						{
							"name": "Round Trip - Same Zone (Default Rate) 🏨→🏨",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Quote successful', () => pm.response.to.have.status(200));",
											"pm.test('Has prices array', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.prices).to.be.an('array');",
											"    pm.expect(jsonData.data.prices.length).to.be.above(0);",
											"});",
											"pm.test('Service type is hotel-hotel', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.serviceTypeTPV).to.equal('service_hotel_hotel');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [{"key": "Accept-Language", "value": "en"}],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?service_type=round-trip&from_location_id=1&to_location_id=3&pax=4&date=2025-11-25",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "service_type", "value": "round-trip"},
										{"key": "from_location_id", "value": "1", "description": "Beach Palace Cancun (Punta Cancun Zone)"},
										{"key": "to_location_id", "value": "3", "description": "Grand Park Royal Cancún (Same Zone)"},
										{"key": "pax", "value": "4"},
										{"key": "date", "value": "2025-11-25", "description": "Regular date = Default rates"}
									]
								}
							}
						},
						{
							"name": "Round Trip - Different Zones (Default Rate) 🏨→🏖️",
							"request": {
								"method": "GET",
								"header": [{"key": "Accept-Language", "value": "es"}],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?locale=es&service_type=round-trip&from_location_id=1&to_location_id=18&pax=2&date=2025-10-15",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "locale", "value": "es"},
										{"key": "service_type", "value": "round-trip"},
										{"key": "from_location_id", "value": "1", "description": "Beach Palace Cancun (Punta Cancun Zone)"},
										{"key": "to_location_id", "value": "18", "description": "The Reef 28 (Playa del Carmen Zone)"},
										{"key": "pax", "value": "2"},
										{"key": "date", "value": "2025-10-15", "description": "Regular date = Default rates"}
									]
								}
							}
						},
						{
							"name": "Round Trip - High Season Rates 🎄💰",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Quote successful', () => pm.response.to.have.status(200));",
											"pm.test('High season pricing', function () {",
											"    const jsonData = pm.response.json();",
											"    const standardPrice = parseFloat(jsonData.data.prices[0].costVehicleOW);",
											"    pm.expect(standardPrice).to.be.above(100); // Higher than regular rates",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [{"key": "Accept-Language", "value": "en"}],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?service_type=round-trip&from_location_id=1&to_location_id=18&pax=4&date=2025-12-25",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "service_type", "value": "round-trip"},
										{"key": "from_location_id", "value": "1", "description": "Beach Palace Cancun"},
										{"key": "to_location_id", "value": "18", "description": "The Reef 28 (Playa del Carmen)"},
										{"key": "pax", "value": "4"},
										{"key": "date", "value": "2025-12-25", "description": "Christmas = High season rates (+30%)"}
									]
								}
							}
						},
						{
							"name": "Round Trip - Cross-City Route 🌴→🏖️",
							"request": {
								"method": "GET",
								"header": [{"key": "Accept-Language", "value": "es"}],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?locale=es&service_type=round-trip&from_location_id=5&to_location_id=24&pax=6&date=2025-09-20",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "locale", "value": "es"},
										{"key": "service_type", "value": "round-trip"},
										{"key": "from_location_id", "value": "5", "description": "Adhara Hacienda Cancun"},
										{"key": "to_location_id", "value": "24", "description": "Tulum location"},
										{"key": "pax", "value": "6"},
										{"key": "date", "value": "2025-09-20"}
									]
								}
							}
						}
					]
				},
				{
					"name": "🛫 One Way Quotes",
					"item": [
						{
							"name": "One Way - Local Transport 🚗",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Quote successful', () => pm.response.to.have.status(200));",
											"pm.test('All vehicle types available', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.prices.length).to.be.above(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [{"key": "Accept-Language", "value": "en"}],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?service_type=one-way&from_location_id=2&to_location_id=4&pax=3&date=2025-11-10",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "service_type", "value": "one-way"},
										{"key": "from_location_id", "value": "2", "description": "Breathless Cancun Soul Resort & Spa"},
										{"key": "to_location_id", "value": "4", "description": "Park Royal Beach Cancún"},
										{"key": "pax", "value": "3"},
										{"key": "date", "value": "2025-11-10"}
									]
								}
							}
						},
						{
							"name": "One Way - Airport Style Service 🛬",
							"request": {
								"method": "GET",
								"header": [{"key": "Accept-Language", "value": "es"}],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?locale=es&service_type=one-way&from_location_id=1&to_location_id=22&pax=4&date=2025-12-01",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "locale", "value": "es"},
										{"key": "service_type", "value": "one-way"},
										{"key": "from_location_id", "value": "1", "description": "Beach Palace Cancun"},
										{"key": "to_location_id", "value": "22", "description": "Puerto Juarez (Isla Mujeres ferry)"},
										{"key": "pax", "value": "4"},
										{"key": "date", "value": "2025-12-01", "description": "High season date"}
									]
								}
							}
						},
						{
							"name": "One Way - Long Distance 🚙💨",
							"request": {
								"method": "GET",
								"header": [{"key": "Accept-Language", "value": "en"}],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?service_type=one-way&from_location_id=1&to_location_id=30&pax=2&date=2025-10-05",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "service_type", "value": "one-way"},
										{"key": "from_location_id", "value": "1", "description": "Beach Palace Cancun"},
										{"key": "to_location_id", "value": "30", "description": "Tulum area location"},
										{"key": "pax", "value": "2"},
										{"key": "date", "value": "2025-10-05"}
									]
								}
							}
						}
					]
				},
				{
					"name": "🏨 Hotel to Hotel Quotes",
					"item": [
						{
							"name": "Hotel to Hotel - Same City 🏨↔🏨",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Quote successful', () => pm.response.to.have.status(200));",
											"pm.test('Service type is hotel-to-hotel', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.serviceTypeTPV).to.equal('service_hotel_hotel');",
											"});",
											"pm.test('Competitive pricing for hotel transfers', function () {",
											"    const jsonData = pm.response.json();",
											"    const standardPrice = parseFloat(jsonData.data.prices[0].costVehicleOW);",
											"    pm.expect(standardPrice).to.be.below(100); // Should be cheaper than airport transfers",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [{"key": "Accept-Language", "value": "en"}],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?service_type=hotel-to-hotel&from_location_id=5&to_location_id=7&pax=2&date=2025-11-20",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "service_type", "value": "hotel-to-hotel"},
										{"key": "from_location_id", "value": "5", "description": "Adhara Hacienda Cancun"},
										{"key": "to_location_id", "value": "7", "description": "Airbnb Cancun"},
										{"key": "pax", "value": "2"},
										{"key": "date", "value": "2025-11-20"}
									]
								}
							}
						},
						{
							"name": "Hotel to Hotel - Cross City 🌴→🏖️",
							"request": {
								"method": "GET",
								"header": [{"key": "Accept-Language", "value": "es"}],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?locale=es&service_type=hotel-to-hotel&from_location_id=1&to_location_id=20&pax=4&date=2025-09-15",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "locale", "value": "es"},
										{"key": "service_type", "value": "hotel-to-hotel"},
										{"key": "from_location_id", "value": "1", "description": "Beach Palace Cancun"},
										{"key": "to_location_id", "value": "20", "description": "Hilton Playa del Carmen"},
										{"key": "pax", "value": "4"},
										{"key": "date", "value": "2025-09-15"}
									]
								}
							}
						},
						{
							"name": "Hotel to Hotel - Resort to Downtown 🏨→🏙️",
							"request": {
								"method": "GET",
								"header": [{"key": "Accept-Language", "value": "en"}],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?service_type=hotel-to-hotel&from_location_id=9&to_location_id=5&pax=3",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "service_type", "value": "hotel-to-hotel"},
										{"key": "from_location_id", "value": "9", "description": "Aloft Cancun (Resort area)"},
										{"key": "to_location_id", "value": "5", "description": "Adhara Hacienda Cancun (Downtown)"},
										{"key": "pax", "value": "3"}
									]
								}
							}
						}
					]
				},
				{
					"name": "🛬 Arrival Service Quotes",
					"item": [
						{
							"name": "Arrival - Airport to Hotel 🛬→🏨",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Quote successful', () => pm.response.to.have.status(200));",
											"pm.test('Airport service features included', function () {",
											"    const jsonData = pm.response.json();",
											"    const features = jsonData.data.prices[0].features;",
											"    const hasAirportFeatures = features.some(f => f.name.includes('Meet & Greet') || f.name.includes('Flight monitoring'));",
											"    pm.expect(hasAirportFeatures).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [{"key": "Accept-Language", "value": "en"}],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?service_type=arrival&from_location_id=1&to_location_id=10&pax=4&date=2025-12-15",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "service_type", "value": "arrival"},
										{"key": "from_location_id", "value": "1", "description": "Beach Palace Cancun (treat as airport area)"},
										{"key": "to_location_id", "value": "10", "description": "Krystal Cancun"},
										{"key": "pax", "value": "4"},
										{"key": "date", "value": "2025-12-15", "description": "High season"}
									]
								}
							}
						},
						{
							"name": "Arrival - Ferry Terminal to Hotel ⛵→🏨",
							"request": {
								"method": "GET",
								"header": [{"key": "Accept-Language", "value": "es"}],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?locale=es&service_type=arrival&from_location_id=22&to_location_id=17&pax=2&date=2025-11-05",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "locale", "value": "es"},
										{"key": "service_type", "value": "arrival"},
										{"key": "from_location_id", "value": "22", "description": "Puerto Juarez (Ferry terminal)"},
										{"key": "to_location_id", "value": "17", "description": "All Ritmo Cancun Resort"},
										{"key": "pax", "value": "2"},
										{"key": "date", "value": "2025-11-05"}
									]
								}
							}
						}
					]
				},
				{
					"name": "🛫 Departure Service Quotes",
					"item": [
						{
							"name": "Departure - Hotel to Airport 🏨→🛫",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Quote successful', () => pm.response.to.have.status(200));",
											"pm.test('Has flight monitoring features', function () {",
											"    const jsonData = pm.response.json();",
											"    const features = jsonData.data.prices[0].features;",
											"    const hasFlightFeature = features.some(f => f.name.includes('Flight monitoring') || f.name.includes('flight changes'));",
											"    pm.expect(hasFlightFeature).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [{"key": "Accept-Language", "value": "en"}],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?service_type=departure&from_location_id=11&to_location_id=1&pax=3&date=2025-10-20",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "service_type", "value": "departure"},
										{"key": "from_location_id", "value": "11", "description": "The Ritz Carlton Cancun"},
										{"key": "to_location_id", "value": "1", "description": "Beach Palace Cancun (treat as airport area)"},
										{"key": "pax", "value": "3"},
										{"key": "date", "value": "2025-10-20"}
									]
								}
							}
						},
						{
							"name": "Departure - Hotel to Ferry 🏨→⛵",
							"request": {
								"method": "GET",
								"header": [{"key": "Accept-Language", "value": "es"}],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?locale=es&service_type=departure&from_location_id=20&to_location_id=23&pax=5&date=2025-12-10",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "locale", "value": "es"},
										{"key": "service_type", "value": "departure"},
										{"key": "from_location_id", "value": "20", "description": "Hilton Playa del Carmen"},
										{"key": "to_location_id", "value": "23", "description": "Playa del Carmen Ferry"},
										{"key": "pax", "value": "5"},
										{"key": "date", "value": "2025-12-10"}
									]
								}
							}
						}
					]
				},
				{
					"name": "✨ Highlighted/Featured Quotes",
					"item": [
						{
							"name": "🌟 Get All Highlighted Quotes (USD)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Highlighted quotes successful', () => pm.response.to.have.status(200));",
											"pm.test('Has highlighted quotes array', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.highlighted_quotes).to.be.an('array');",
											"    pm.expect(jsonData.data.highlighted_quotes.length).to.be.above(0);",
											"});",
											"pm.test('Each quote has required fields', function () {",
											"    const jsonData = pm.response.json();",
											"    const quote = jsonData.data.highlighted_quotes[0];",
											"    pm.expect(quote).to.have.property('service_category');",
											"    pm.expect(quote).to.have.property('vehicle_type');",
											"    pm.expect(quote).to.have.property('route');",
											"    pm.expect(quote).to.have.property('pricing');",
											"    pm.expect(quote).to.have.property('highlight');",
											"});",
											"pm.test('Route has from and to locations', function () {",
											"    const jsonData = pm.response.json();",
											"    const route = jsonData.data.highlighted_quotes[0].route;",
											"    pm.expect(route.from).to.have.property('name');",
											"    pm.expect(route.to).to.have.property('name');",
											"    pm.expect(route.from).to.have.property('city');",
											"    pm.expect(route.to).to.have.property('city');",
											"});",
											"pm.test('Pricing in USD', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.currency).to.equal('usd');",
											"    pm.expect(jsonData.data.highlighted_quotes[0].pricing.starting_from).to.be.a('number');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language", 
										"value": "en"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/highlighted-quotes?currency=USD&locale=en",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "highlighted-quotes"],
									"query": [
										{
											"key": "currency",
											"value": "USD",
											"description": "Currency for pricing (USD/MXN)"
										},
										{
											"key": "locale",
											"value": "en", 
											"description": "Language for response (en/es)"
										}
									]
								},
								"description": "Get all highlighted/featured quotes for homepage display. Returns service categories like Airport Transfer, Hotel Transfer, and Private Transfer with predefined routes, pricing, and vehicle details."
							},
							"response": []
						},
						{
							"name": "💰 Get All Highlighted Quotes (MXN)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Highlighted quotes successful', () => pm.response.to.have.status(200));",
											"pm.test('Currency converted to MXN', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.currency).to.equal('mxn');",
											"    const price = jsonData.data.highlighted_quotes[0].pricing.starting_from;",
											"    pm.expect(price).to.be.above(500); // Should be higher in MXN",
											"});",
											"pm.test('Exchange rates provided', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.exchange_rates).to.have.property('to_usd');",
											"    pm.expect(jsonData.data.exchange_rates).to.have.property('to_mxn');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "es"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/highlighted-quotes?currency=MXN&locale=es",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "highlighted-quotes"],
									"query": [
										{
											"key": "currency",
											"value": "MXN",
											"description": "Mexican Pesos currency"
										},
										{
											"key": "locale",
											"value": "es",
											"description": "Spanish language"
										}
									]
								},
								"description": "Get highlighted quotes with pricing in Mexican Pesos and Spanish language responses."
							},
							"response": []
						},
						{
							"name": "🎯 Get Single Highlighted Quote",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Single quote successful', () => pm.response.to.have.status(200));",
											"pm.test('Returns single quote object', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"    pm.expect(jsonData.data.id).to.equal(1);",
											"});",
											"pm.test('Quote has all detail fields', function () {",
											"    const jsonData = pm.response.json();",
											"    const quote = jsonData.data;",
											"    pm.expect(quote.vehicle_type).to.have.property('video_url');",
											"    pm.expect(quote.vehicle_type).to.have.property('frame');",
											"    pm.expect(quote.vehicle_type.features).to.be.an('array');",
											"    pm.expect(quote.pricing).to.have.property('currency');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/highlighted-quotes/1?currency=USD&locale=en",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "highlighted-quotes", "1"],
									"query": [
										{
											"key": "currency",
											"value": "USD"
										},
										{
											"key": "locale",
											"value": "en"
										}
									]
								},
								"description": "Get detailed information for a specific highlighted quote by ID. Includes additional fields like video_url and frame for detailed display."
							},
							"response": []
						},
						{
							"name": "❌ Get Non-existent Highlighted Quote",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Returns 404 for non-existent quote', () => {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test('Error response format', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.false;",
											"    pm.expect(jsonData.message).to.include('not_found');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/highlighted-quotes/999",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "highlighted-quotes", "999"]
								},
								"description": "Test error handling for non-existent highlighted quote ID."
							},
							"response": []
						}
					]
				},
				{
					"name": "🎯 Edge Cases & Stress Tests",
					"item": [
						{
							"name": "Edge - Maximum Passengers (50) 👥",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Quote successful with max passengers', () => pm.response.to.have.status(200));",
											"pm.test('Large capacity vehicles available', function () {",
											"    const jsonData = pm.response.json();",
											"    const hasLargeVehicle = jsonData.data.prices.some(p => p.mPax >= 50);",
											"    // If no large vehicles, should still provide multiple vehicles",
											"    pm.expect(jsonData.data.prices.length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?service_type=round-trip&from_location_id=1&to_location_id=18&pax=50&date=2025-11-30",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "service_type", "value": "round-trip"},
										{"key": "from_location_id", "value": "1"},
										{"key": "to_location_id", "value": "18"},
										{"key": "pax", "value": "50", "description": "Maximum passengers allowed"},
										{"key": "date", "value": "2025-11-30"}
									]
								}
							}
						},
						{
							"name": "Edge - Far Future Date 🔮",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?service_type=one-way&from_location_id=5&to_location_id=15&pax=2&date=2026-06-15",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "service_type", "value": "one-way"},
										{"key": "from_location_id", "value": "5"},
										{"key": "to_location_id", "value": "15"},
										{"key": "pax", "value": "2"},
										{"key": "date", "value": "2026-06-15", "description": "Far future - should use default rates"}
									]
								}
							}
						},
						{
							"name": "Edge - Random Location Combinations 🎲",
							"request": {
								"method": "GET",
								"header": [{"key": "Accept-Language", "value": "es"}],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?locale=es&service_type=hotel-to-hotel&from_location_id=8&to_location_id=25&pax=7&date=2025-08-22",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "locale", "value": "es"},
										{"key": "service_type", "value": "hotel-to-hotel"},
										{"key": "from_location_id", "value": "8", "description": "Random location"},
										{"key": "to_location_id", "value": "25", "description": "Random location"},
										{"key": "pax", "value": "7"},
										{"key": "date", "value": "2025-08-22"}
									]
								}
							}
						},
						{
							"name": "Edge - Cross-Zone Long Distance 🚐💨",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?service_type=round-trip&from_location_id=2&to_location_id=35&pax=8",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "service_type", "value": "round-trip"},
										{"key": "from_location_id", "value": "2", "description": "Cancun location"},
										{"key": "to_location_id", "value": "35", "description": "Distant location (if exists)"},
										{"key": "pax", "value": "8"}
									]
								}
							}
						}
					]
				},
				{
					"name": "💰 Rate Comparison Tests",
					"item": [
						{
							"name": "Compare - Default vs High Season 📊",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Store route for comparison",
											"pm.environment.set('compare_from', '1');",
											"pm.environment.set('compare_to', '18');",
											"pm.environment.set('compare_pax', '4');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Default rate quote successful', () => pm.response.to.have.status(200));",
											"const jsonData = pm.response.json();",
											"const defaultPrice = parseFloat(jsonData.data.prices[0].costVehicleOW);",
											"pm.environment.set('default_price', defaultPrice.toString());",
											"pm.test('Has reasonable default price', function () {",
											"    pm.expect(defaultPrice).to.be.above(50);",
											"    pm.expect(defaultPrice).to.be.below(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?service_type=round-trip&from_location_id={{compare_from}}&to_location_id={{compare_to}}&pax={{compare_pax}}&date=2025-11-25",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "service_type", "value": "round-trip"},
										{"key": "from_location_id", "value": "{{compare_from}}"},
										{"key": "to_location_id", "value": "{{compare_to}}"},
										{"key": "pax", "value": "{{compare_pax}}"},
										{"key": "date", "value": "2025-11-25", "description": "Regular date"}
									]
								}
							}
						},
						{
							"name": "Compare - High Season Rate 💎",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('High season quote successful', () => pm.response.to.have.status(200));",
											"const jsonData = pm.response.json();",
											"const highSeasonPrice = parseFloat(jsonData.data.prices[0].costVehicleOW);",
											"const defaultPrice = parseFloat(pm.environment.get('default_price'));",
											"pm.test('High season is more expensive than default', function () {",
											"    pm.expect(highSeasonPrice).to.be.above(defaultPrice);",
											"    const increase = ((highSeasonPrice - defaultPrice) / defaultPrice) * 100;",
											"    pm.expect(increase).to.be.above(20); // At least 20% increase",
											"    console.log(`Price increase: ${increase.toFixed(1)}%`);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?service_type=round-trip&from_location_id={{compare_from}}&to_location_id={{compare_to}}&pax={{compare_pax}}&date=2025-12-25",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "service_type", "value": "round-trip"},
										{"key": "from_location_id", "value": "{{compare_from}}"},
										{"key": "to_location_id", "value": "{{compare_to}}"},
										{"key": "pax", "value": "{{compare_pax}}"},
										{"key": "date", "value": "2025-12-25", "description": "Christmas = High season"}
									]
								}
							}
						}
					]
				},
				{
					"name": "❌ Error Scenarios",
					"item": [
						{
							"name": "❌ Missing Required Fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validation error 422', () => pm.response.to.have.status(422));",
											"pm.test('Has validation errors', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [{"key": "Accept-Language", "value": "es"}],
								"url": {
									"raw": "{{base_url}}/api/v1/quote",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"]
								}
							}
						},
						{
							"name": "❌ Invalid Service Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validation error 422', () => pm.response.to.have.status(422));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?service_type=invalid&from_location_id=1&to_location_id=2&pax=2",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "service_type", "value": "invalid", "description": "Invalid service type"},
										{"key": "from_location_id", "value": "1"},
										{"key": "to_location_id", "value": "2"},
										{"key": "pax", "value": "2"}
									]
								}
							}
						},
						{
							"name": "❌ Same Location IDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validation error 422', () => pm.response.to.have.status(422));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?service_type=one-way&from_location_id=1&to_location_id=1&pax=2",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "service_type", "value": "one-way"},
										{"key": "from_location_id", "value": "1"},
										{"key": "to_location_id", "value": "1", "description": "Same as from_location_id"},
										{"key": "pax", "value": "2"}
									]
								}
							}
						},
						{
							"name": "❌ Invalid Passenger Count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validation error 422', () => pm.response.to.have.status(422));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?service_type=one-way&from_location_id=1&to_location_id=2&pax=0",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "service_type", "value": "one-way"},
										{"key": "from_location_id", "value": "1"},
										{"key": "to_location_id", "value": "2"},
										{"key": "pax", "value": "0", "description": "Invalid: must be 1-50"}
									]
								}
							}
						},
						{
							"name": "❌ Invalid Date Format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validation error 422', () => pm.response.to.have.status(422));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?service_type=round-trip&from_location_id=1&to_location_id=2&pax=2&date=invalid-date",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "service_type", "value": "round-trip"},
										{"key": "from_location_id", "value": "1"},
										{"key": "to_location_id", "value": "2"},
										{"key": "pax", "value": "2"},
										{"key": "date", "value": "invalid-date", "description": "Invalid date format"}
									]
								}
							}
						},
						{
							"name": "❌ Past Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validation error 422', () => pm.response.to.have.status(422));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/quote?service_type=round-trip&from_location_id=1&to_location_id=2&pax=2&date=2024-01-01",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "quote"],
									"query": [
										{"key": "service_type", "value": "round-trip"},
										{"key": "from_location_id", "value": "1"},
										{"key": "to_location_id", "value": "2"},
										{"key": "pax", "value": "2"},
										{"key": "date", "value": "2024-01-01", "description": "Past date"}
									]
								}
							}
						}
					]
				}
			]
		},
		{
			"name": "🔍 Autocomplete Service",
			"item": [
				{
					"name": "Autocomplete Search - All Service Types",
					"request": {
						"method": "GET",
						"header": [{"key": "Accept-Language", "value": "en"}],
						"url": {
							"raw": "{{base_url}}/api/v1/autocomplete/search?q=cancun&service_type=round-trip&input=from",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "autocomplete", "search"],
							"query": [
								{"key": "q", "value": "cancun", "description": "Search query"},
								{"key": "service_type", "value": "round-trip", "description": "round-trip, one-way, hotel-to-hotel, arrival, departure"},
								{"key": "input", "value": "from", "description": "from or to"}
							]
						}
					}
				}
			]
		},
		{
			"name": "📍 Locations Management",
			"item": [
				{
					"name": "Get All Locations",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/locations",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "locations"]
						}
					}
				},
				{
					"name": "Get Locations by City",
					"request": {
						"method": "GET",
						"header": [{"key": "Accept-Language", "value": "es"}],
						"url": {
							"raw": "{{base_url}}/api/v1/cities/1/locations",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "cities", "1", "locations"]
						}
					}
				},
				{
					"name": "Get Locations by Type - Hotels",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/locations/type/H",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "locations", "type", "H"]
						}
					}
				}
			]
		},
		{
			"name": "🏙️ Cities Management",
			"item": [
				{
					"name": "Get All Cities",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/cities",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "cities"]
						}
					}
				}
			]
		},
		{
			"name": "🗺️ Zones Management",
			"item": [
				{
					"name": "Get All Zones",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/zones",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "zones"]
						}
					}
				}
			]
		},
		{
			"name": "🚗 Vehicle Types",
			"item": [
				{
					"name": "Get All Vehicle Types",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/vehicle-types",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "vehicle-types"]
						}
					}
				}
			]
		},
		{
			"name": "⭐ Service Features",
			"item": [
				{
					"name": "Get All Service Features",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/service-features",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "service-features"]
						}
					}
				}
			]
		},
		{
			"name": "📋 Booking Management",
			"item": [
				{
					"name": "📋 Overview - Booking Service & Valid Service Types",
					"request": {
						"method": "GET",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/bookings",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings"],
							"query": [
								{"key": "status", "value": "pending", "disabled": true, "description": "pending, confirmed, in_progress, completed, cancelled"},
								{"key": "trip_type", "value": "round-trip", "disabled": true, "description": "arrival, departure, round-trip, hotel-to-hotel"},
								{"key": "customer_email", "value": "john@example.com", "disabled": true, "description": "Filter by customer email"},
								{"key": "date_from", "value": "2025-09-01", "disabled": true, "description": "Start date filter (YYYY-MM-DD)"},
								{"key": "date_to", "value": "2025-09-30", "disabled": true, "description": "End date filter (YYYY-MM-DD)"},
								{"key": "per_page", "value": "15", "disabled": true, "description": "Items per page (default: 15)"},
								{"key": "VALID_SERVICE_NAMES", "value": "Round Trip | One Way | Hotel to Hotel", "disabled": true, "description": "✅ VALID serviceName VALUES"},
								{"key": "VALID_SERVICE_CODES", "value": "RT | OW | HTH", "disabled": true, "description": "✅ VALID serviceName CODE VALUES"}
							]
						}
					}
				},
				{
					"name": "📋 Complete Booking Parameters Example - ALL FIELDS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Complete booking created successfully', () => pm.response.to.have.status(201));",
									"pm.test('All optional fields included', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('booking_number');",
									"    pm.expect(jsonData.data).to.have.property('child_seats');",
									"    pm.expect(jsonData.data).to.have.property('wheelchair_accessible');",
									"    pm.expect(jsonData.data).to.have.property('hotel_reservation_name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept-Language", "value": "en"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerInfo\": {\n    \"firstName\": \"Michael\",\n    \"lastName\": \"Johnson\",\n    \"email\": \"michael.johnson@example.com\",\n    \"phone\": \"+1-555-9876\",\n    \"country\": \"United States\"\n  },\n  \"pickupLocation\": \"Breathless Cancun Soul Resort & Spa - Main Lobby\",\n  \"dropoffLocation\": \"Cancun International Airport - Terminal 4 Departures\",\n  \"pickupDateTime\": \"2025-12-28T08:00:00\",\n  \"passengers\": 8,\n  \"serviceId\": 5,\n  \"serviceName\": \"One Way\",\n  \"currency\": \"USD\",\n  \"totalPrice\": 185.50,\n  \"specialRequests\": \"Large group with extra luggage. Please bring spacious vehicle. One passenger uses wheelchair. Need assistance with bags.\",\n  \"childSeats\": 3,\n  \"wheelchairAccessible\": true,\n  \"hotelReservationName\": \"Johnson Extended Family Holiday Group\",\n  \"fromLocationId\": 2,\n  \"toLocationId\": 1,\n  \"fromLocationType\": \"location\",\n  \"toLocationType\": \"airport\",\n  \"tripType\": \"departure\",\n  \"bookingDate\": \"2025-09-06T18:45:00\",\n  \"departureFlightInfo\": {\n    \"airline\": \"Delta Airlines\",\n    \"flightNumber\": \"DL1547\",\n    \"date\": \"2025-12-28\",\n    \"time\": \"11:30\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/bookings",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings"]
						}
					}
				},
				{
					"name": "🔧 Minimal Required Fields Example - REQUIRED ONLY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Minimal booking created successfully', () => pm.response.to.have.status(201));",
									"pm.test('Works with minimum required fields', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('booking_number');",
									"    pm.expect(jsonData.data.status).to.equal('pending');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerInfo\": {\n    \"firstName\": \"Jane\",\n    \"email\": \"jane.smith@example.com\",\n    \"phone\": \"+1-555-4321\",\n    \"country\": \"Canada\"\n  },\n  \"pickupLocation\": \"Grand Park Royal Cancún - Front Desk\",\n  \"dropoffLocation\": \"Airbnb Cancun - Address Provided\",\n  \"pickupDateTime\": \"2025-10-10T14:00:00\",\n  \"passengers\": 2,\n  \"serviceName\": \"One Way\",\n  \"currency\": \"USD\",\n  \"totalPrice\": 65.00,\n  \"fromLocationId\": 3,\n  \"toLocationId\": 7,\n  \"fromLocationType\": \"location\",\n  \"toLocationType\": \"location\",\n  \"tripType\": \"one-way\",\n  \"bookingDate\": \"2025-09-06T19:30:00\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/bookings",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings"]
						}
					}
				},
				{
					"name": "🎯 COMPLETE EXAMPLE - Every Parameter Possible",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Ultra-complete booking created successfully', () => pm.response.to.have.status(201));",
									"pm.test('All parameters processed correctly', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('booking_number');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('customer_id');",
									"    pm.expect(jsonData.data).to.have.property('service_type_id');",
									"    pm.expect(jsonData.data).to.have.property('vehicle_type_id');",
									"    pm.expect(jsonData.data.status).to.equal('pending');",
									"    pm.expect(jsonData.data.child_seats).to.equal(2);",
									"    pm.expect(jsonData.data.wheelchair_accessible).to.equal(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept-Language", "value": "es"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerInfo\": {\n    \"firstName\": \"Ana Isabella\",\n    \"lastName\": \"García Martinez\",\n    \"email\": \"ana.garcia@example.com\",\n    \"phone\": \"+34-91-123-4567\",\n    \"country\": \"Spain\"\n  },\n  \"pickupLocation\": \"Park Royal Beach Cancún - Concierge Desk Level 1\",\n  \"dropoffLocation\": \"All Ritmo Cancun Resort & Waterpark - Main Reception Building A\",\n  \"pickupDateTime\": \"2025-12-31T16:45:00\",\n  \"passengers\": 7,\n  \"serviceId\": 6,\n  \"serviceName\": \"Round Trip\",\n  \"currency\": \"EUR\",\n  \"totalPrice\": 275.80,\n  \"specialRequests\": \"VIP family group traveling with elderly grandparents (85+ years old). Need wheelchair-accessible vehicle with ramp. Prefer experienced driver familiar with resort areas. Will have 4 large suitcases + carry-on bags. Request music volume low. Child booster seats needed for ages 4 and 6. Pickup precisely at 4:45 PM - important flight connection. Emergency contact: +34-600-999-888. Prefer air conditioning temperature at 22°C. Group speaks Spanish and English.\",\n  \"childSeats\": 2,\n  \"wheelchairAccessible\": true,\n  \"hotelReservationName\": \"García Family New Year Celebration - Confirmation #RES-2025-NYE-7834\",\n  \"fromLocationId\": 4,\n  \"toLocationId\": 17,\n  \"fromLocationType\": \"location\",\n  \"toLocationType\": \"location\",\n  \"tripType\": \"round-trip\",\n  \"bookingDate\": \"2025-09-06T20:15:30\",\n  \"arrivalFlightInfo\": {\n    \"airline\": \"Iberia Airlines\",\n    \"flightNumber\": \"IB6275\",\n    \"date\": \"2025-12-31\",\n    \"time\": \"14:20\"\n  },\n  \"departureFlightInfo\": {\n    \"airline\": \"Iberia Airlines\",\n    \"flightNumber\": \"IB6276\",\n    \"date\": \"2026-01-07\",\n    \"time\": \"18:55\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/bookings",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings"]
						}
					}
				},
				{
					"name": "✅ Create New Booking - Round Trip",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Booking created successfully', () => pm.response.to.have.status(201));",
									"pm.test('Response has booking data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('booking_number');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data.status).to.equal('pending');",
									"});",
									"",
									"// Store booking ID for other tests",
									"const jsonData = pm.response.json();",
									"pm.environment.set('test_booking_id', jsonData.data.id);",
									"pm.environment.set('test_booking_number', jsonData.data.booking_number);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept-Language", "value": "en"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerInfo\": {\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"phone\": \"+1-555-0123\",\n    \"country\": \"United States\"\n  },\n  \"pickupLocation\": \"Beach Palace Cancun - Resort Lobby\",\n  \"dropoffLocation\": \"The Reef 28 - Main Entrance\",\n  \"pickupDateTime\": \"2025-11-15T10:30:00\",\n  \"passengers\": 4,\n  \"serviceId\": 1,\n  \"serviceName\": \"Round Trip\",\n  \"currency\": \"USD\",\n  \"totalPrice\": 150.00,\n  \"specialRequests\": \"Please arrive 15 minutes early. Child seat needed for 5-year-old.\",\n  \"childSeats\": 1,\n  \"wheelchairAccessible\": false,\n  \"hotelReservationName\": \"Doe Family Reservation\",\n  \"fromLocationId\": 1,\n  \"toLocationId\": 18,\n  \"fromLocationType\": \"location\",\n  \"toLocationType\": \"location\",\n  \"tripType\": \"round-trip\",\n  \"bookingDate\": \"2025-09-06T14:30:00\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/bookings",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings"]
						}
					}
				},
				{
					"name": "✈️ Create Booking - Airport Arrival",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Airport booking created successfully', () => pm.response.to.have.status(201));",
									"pm.test('Has flight information', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('arrival_flight_info');",
									"    pm.expect(jsonData.data.trip_type).to.equal('arrival');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept-Language", "value": "es"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerInfo\": {\n    \"firstName\": \"Maria\",\n    \"lastName\": \"Rodriguez\",\n    \"email\": \"maria.rodriguez@example.com\",\n    \"phone\": \"+52-998-123-4567\",\n    \"country\": \"Mexico\"\n  },\n  \"pickupLocation\": \"Cancun International Airport - Terminal 2 Arrivals\",\n  \"dropoffLocation\": \"Krystal Cancun - Main Lobby\",\n  \"pickupDateTime\": \"2025-12-20T14:45:00\",\n  \"passengers\": 2,\n  \"serviceId\": 2,\n  \"serviceName\": \"One Way\",\n  \"currency\": \"USD\",\n  \"totalPrice\": 85.00,\n  \"specialRequests\": \"Please monitor flight for delays. Will have large luggage.\",\n  \"childSeats\": 0,\n  \"wheelchairAccessible\": false,\n  \"fromLocationId\": 1,\n  \"toLocationId\": 10,\n  \"fromLocationType\": \"airport\",\n  \"toLocationType\": \"location\",\n  \"tripType\": \"arrival\",\n  \"bookingDate\": \"2025-09-06T15:00:00\",\n  \"arrivalFlightInfo\": {\n    \"airline\": \"American Airlines\",\n    \"flightNumber\": \"AA2749\",\n    \"date\": \"2025-12-20\",\n    \"time\": \"14:30\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/bookings",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings"]
						}
					}
				},
				{
					"name": "🛫 Create Booking - Airport Departure",
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept-Language", "value": "en"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerInfo\": {\n    \"firstName\": \"James\",\n    \"lastName\": \"Wilson\",\n    \"email\": \"james.wilson@example.com\",\n    \"phone\": \"+1-555-0789\",\n    \"country\": \"Canada\"\n  },\n  \"pickupLocation\": \"The Ritz Carlton Cancun - Valet Area\",\n  \"dropoffLocation\": \"Cancun International Airport - Terminal 3 Departures\",\n  \"pickupDateTime\": \"2025-10-25T11:00:00\",\n  \"passengers\": 3,\n  \"serviceId\": 3,\n  \"serviceName\": \"One Way\",\n  \"currency\": \"USD\",\n  \"totalPrice\": 75.00,\n  \"specialRequests\": \"Early pickup requested - flight at 2:00 PM\",\n  \"childSeats\": 0,\n  \"wheelchairAccessible\": false,\n  \"fromLocationId\": 11,\n  \"toLocationId\": 1,\n  \"fromLocationType\": \"location\",\n  \"toLocationType\": \"airport\",\n  \"tripType\": \"departure\",\n  \"bookingDate\": \"2025-09-06T16:00:00\",\n  \"departureFlightInfo\": {\n    \"airline\": \"WestJet\",\n    \"flightNumber\": \"WS2680\",\n    \"date\": \"2025-10-25\",\n    \"time\": \"14:00\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/bookings",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings"]
						}
					}
				},
				{
					"name": "🏨 Create Booking - Hotel to Hotel",
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept-Language", "value": "es"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerInfo\": {\n    \"firstName\": \"Carlos\",\n    \"lastName\": \"Mendez\",\n    \"email\": \"carlos.mendez@example.com\",\n    \"phone\": \"+52-998-555-0123\",\n    \"country\": \"Mexico\"\n  },\n  \"pickupLocation\": \"Adhara Hacienda Cancun - Reception\",\n  \"dropoffLocation\": \"Hilton Playa del Carmen - Main Entrance\",\n  \"pickupDateTime\": \"2025-11-30T09:00:00\",\n  \"passengers\": 6,\n  \"serviceId\": 4,\n  \"serviceName\": \"Hotel to Hotel\",\n  \"currency\": \"USD\",\n  \"totalPrice\": 120.00,\n  \"specialRequests\": \"Group transfer for family reunion. Need extra space for luggage.\",\n  \"childSeats\": 2,\n  \"wheelchairAccessible\": false,\n  \"hotelReservationName\": \"Mendez Family Group\",\n  \"fromLocationId\": 5,\n  \"toLocationId\": 20,\n  \"fromLocationType\": \"location\",\n  \"toLocationType\": \"location\",\n  \"tripType\": \"hotel-to-hotel\",\n  \"bookingDate\": \"2025-09-06T17:00:00\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/bookings",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings"]
						}
					}
				},
				{
					"name": "🔤 Service Type Examples - Using Codes (RT, OW, HTH)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Booking with service code created successfully', () => pm.response.to.have.status(201));",
									"pm.test('Service code accepted', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('service_type_id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept-Language", "value": "en"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerInfo\": {\n    \"firstName\": \"Sarah\",\n    \"lastName\": \"Code Example\",\n    \"email\": \"sarah.codes@example.com\",\n    \"phone\": \"+1-555-CODE\",\n    \"country\": \"United States\"\n  },\n  \"pickupLocation\": \"Aloft Cancun - Modern Lobby\",\n  \"dropoffLocation\": \"Krystal Cancun - Reception Desk\",\n  \"pickupDateTime\": \"2025-11-20T12:00:00\",\n  \"passengers\": 3,\n  \"serviceId\": 2,\n  \"serviceName\": \"OW\",\n  \"currency\": \"USD\",\n  \"totalPrice\": 89.00,\n  \"specialRequests\": \"Using service TYPE CODE instead of full name. OW = One Way service.\",\n  \"childSeats\": 0,\n  \"wheelchairAccessible\": false,\n  \"fromLocationId\": 9,\n  \"toLocationId\": 10,\n  \"fromLocationType\": \"location\",\n  \"toLocationType\": \"location\",\n  \"tripType\": \"one-way\",\n  \"bookingDate\": \"2025-09-06T21:00:00\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/bookings",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings"]
						}
					}
				},
				{
					"name": "📋 Get All Bookings (Paginated)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Bookings retrieved successfully', () => pm.response.to.have.status(200));",
									"pm.test('Response has pagination meta', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData).to.have.property('meta');",
									"    pm.expect(jsonData.meta).to.have.property('current_page');",
									"    pm.expect(jsonData.meta).to.have.property('total');",
									"    pm.expect(jsonData.meta).to.have.property('per_page');",
									"});",
									"pm.test('Data is array of bookings', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [{"key": "Accept-Language", "value": "en"}],
						"url": {
							"raw": "{{base_url}}/api/v1/bookings?per_page=10",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings"],
							"query": [
								{"key": "per_page", "value": "10", "description": "Items per page"}
							]
						}
					}
				},
				{
					"name": "🔍 Get Bookings by Status",
					"request": {
						"method": "GET",
						"header": [{"key": "Accept-Language", "value": "es"}],
						"url": {
							"raw": "{{base_url}}/api/v1/bookings?status=pending&per_page=5",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings"],
							"query": [
								{"key": "status", "value": "pending", "description": "Filter by status"},
								{"key": "per_page", "value": "5"}
							]
						}
					}
				},
				{
					"name": "📧 Get Bookings by Customer Email",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/bookings?customer_email=john.doe@example.com",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings"],
							"query": [
								{"key": "customer_email", "value": "john.doe@example.com", "description": "Filter by customer email"}
							]
						}
					}
				},
				{
					"name": "📅 Get Bookings by Date Range",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/bookings?date_from=2025-11-01&date_to=2025-11-30",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings"],
							"query": [
								{"key": "date_from", "value": "2025-11-01", "description": "Start date filter"},
								{"key": "date_to", "value": "2025-11-30", "description": "End date filter"}
							]
						}
					}
				},
				{
					"name": "🔍 Get Single Booking by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Booking retrieved successfully', () => pm.response.to.have.status(200));",
									"pm.test('Booking has complete data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('booking_number');",
									"    pm.expect(jsonData.data).to.have.property('customer');",
									"    pm.expect(jsonData.data).to.have.property('service_type');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/bookings/{{test_booking_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings", "{{test_booking_id}}"]
						}
					}
				},
				{
					"name": "✏️ Update Booking Status - Confirm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Booking updated successfully', () => pm.response.to.have.status(200));",
									"pm.test('Status changed to confirmed', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.status).to.equal('confirmed');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{"key": "Content-Type", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"confirmed\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/bookings/{{test_booking_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings", "{{test_booking_id}}"]
						}
					}
				},
				{
					"name": "🚗 Update Booking Status - In Progress",
					"request": {
						"method": "PUT",
						"header": [
							{"key": "Content-Type", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"in_progress\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/bookings/{{test_booking_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings", "{{test_booking_id}}"]
						}
					}
				},
				{
					"name": "✅ Update Booking Status - Complete",
					"request": {
						"method": "PUT",
						"header": [
							{"key": "Content-Type", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"completed\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/bookings/{{test_booking_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings", "{{test_booking_id}}"]
						}
					}
				},
				{
					"name": "📝 Update Special Requests",
					"request": {
						"method": "PUT",
						"header": [
							{"key": "Content-Type", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"special_requests\": \"Updated: Please call upon arrival. Customer prefers SUV vehicle if available.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/bookings/{{test_booking_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings", "{{test_booking_id}}"]
						}
					}
				},
				{
					"name": "❌ Cancel Booking with Reason",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Booking cancelled successfully', () => pm.response.to.have.status(200));",
									"pm.test('Status changed to cancelled', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.status).to.equal('cancelled');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{"key": "Content-Type", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"cancelled\",\n  \"cancellation_reason\": \"Customer requested cancellation due to travel plan changes\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/bookings/{{test_booking_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings", "{{test_booking_id}}"]
						}
					}
				},
				{
					"name": "🗑️ Delete/Cancel Booking (Alternative Method)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Booking cancelled successfully', () => pm.response.to.have.status(200));",
									"pm.test('Success message returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('cancelled');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/bookings/{{test_booking_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings", "{{test_booking_id}}"]
						}
					}
				},
				{
					"name": "❌ Error Cases",
					"item": [
						{
							"name": "❌ Create Booking - Missing Required Fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validation error 422', () => pm.response.to.have.status(422));",
											"pm.test('Has validation errors for all missing required fields', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors).to.be.an('object');",
											"    pm.expect(jsonData.success).to.be.false;",
											"    ",
											"    // Check that key required fields are mentioned in errors",
											"    const errorFields = Object.keys(jsonData.errors);",
											"    pm.expect(errorFields).to.include.members([",
											"        'customerInfo.email',",
											"        'customerInfo.phone', ",
											"        'customerInfo.country',",
											"        'dropoffLocation',",
											"        'pickupDateTime',",
											"        'passengers',",
											"        'serviceName',",
											"        'currency',",
											"        'totalPrice',",
											"        'fromLocationId',",
											"        'toLocationId',",
											"        'fromLocationType',",
											"        'toLocationType',",
											"        'tripType',",
											"        'bookingDate'",
											"    ]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{"key": "Content-Type", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"customerInfo\": {\n    \"firstName\": \"John\"\n  },\n  \"pickupLocation\": \"Some location\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/bookings",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "bookings"]
								}
							}
						},
						{
							"name": "❌ Create Booking - Invalid Parameter Values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validation error 422', () => pm.response.to.have.status(422));",
											"pm.test('Validates parameter constraints', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors).to.be.an('object');",
											"    pm.expect(jsonData.success).to.be.false;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{"key": "Content-Type", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"customerInfo\": {\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"email\": \"invalid-email-format\",\n    \"phone\": \"+1-555-0123\",\n    \"country\": \"US\"\n  },\n  \"pickupLocation\": \"Beach Palace Cancun\",\n  \"dropoffLocation\": \"The Reef 28\",\n  \"pickupDateTime\": \"2024-01-01T10:30:00\",\n  \"passengers\": 0,\n  \"serviceName\": \"invalid-service\",\n  \"currency\": \"INVALID\",\n  \"totalPrice\": -50,\n  \"fromLocationId\": 99999,\n  \"toLocationId\": 99999,\n  \"fromLocationType\": \"invalid-type\",\n  \"toLocationType\": \"invalid-type\",\n  \"tripType\": \"invalid-trip\",\n  \"bookingDate\": \"invalid-date\",\n  \"childSeats\": -1,\n  \"specialRequests\": \"A\".repeat(1001)\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/bookings",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "bookings"]
								}
							}
						},
						{
							"name": "❌ Create Booking - Invalid Email Format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validation error 422', () => pm.response.to.have.status(422));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{"key": "Content-Type", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"customerInfo\": {\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"email\": \"invalid-email\",\n    \"phone\": \"+1-555-0123\",\n    \"country\": \"United States\"\n  },\n  \"pickupLocation\": \"Beach Palace Cancun\",\n  \"dropoffLocation\": \"The Reef 28\",\n  \"pickupDateTime\": \"2025-11-15T10:30:00\",\n  \"passengers\": 4,\n  \"serviceName\": \"Round Trip\",\n  \"currency\": \"USD\",\n  \"totalPrice\": 150.00,\n  \"fromLocationId\": 1,\n  \"toLocationId\": 18,\n  \"fromLocationType\": \"location\",\n  \"toLocationType\": \"location\",\n  \"tripType\": \"round-trip\",\n  \"bookingDate\": \"2025-09-06T14:30:00\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/bookings",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "bookings"]
								}
							}
						},
						{
							"name": "❌ Create Booking - Past Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validation error 422', () => pm.response.to.have.status(422));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{"key": "Content-Type", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"customerInfo\": {\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"email\": \"john@example.com\",\n    \"phone\": \"+1-555-0123\",\n    \"country\": \"United States\"\n  },\n  \"pickupLocation\": \"Beach Palace Cancun\",\n  \"dropoffLocation\": \"The Reef 28\",\n  \"pickupDateTime\": \"2024-01-01T10:30:00\",\n  \"passengers\": 4,\n  \"serviceName\": \"Round Trip\",\n  \"currency\": \"USD\",\n  \"totalPrice\": 150.00,\n  \"fromLocationId\": 1,\n  \"toLocationId\": 18,\n  \"fromLocationType\": \"location\",\n  \"toLocationType\": \"location\",\n  \"tripType\": \"round-trip\",\n  \"bookingDate\": \"2025-09-06T14:30:00\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/bookings",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "bookings"]
								}
							}
						},
						{
							"name": "❌ Get Booking - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Booking not found 404', () => pm.response.to.have.status(404));",
											"pm.test('Error message returned', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.false;",
											"    pm.expect(jsonData.message).to.include('not found');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/bookings/99999",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "bookings", "99999"]
								}
							}
						},
						{
							"name": "❌ Update Booking - Invalid Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validation error 422', () => pm.response.to.have.status(422));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{"key": "Content-Type", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"status\": \"invalid_status\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/bookings/1",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "bookings", "1"]
								}
							}
						}
					]
				}
			]
		},
		{
			"name": "🚀 One-Step Booking + Payment",
			"item": [
				{
					"name": "🚀 Create Booking with Payment - Complete Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Booking with payment created successfully', () => pm.response.to.have.status(201));",
									"pm.test('Response has booking and payment data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('booking');",
									"    pm.expect(jsonData.data).to.have.property('payment');",
									"    pm.expect(jsonData.data.booking).to.have.property('id');",
									"    pm.expect(jsonData.data.booking).to.have.property('booking_number');",
									"    pm.expect(jsonData.data.payment).to.have.property('client_secret');",
									"    pm.expect(jsonData.data.payment).to.have.property('payment_intent_id');",
									"    pm.expect(jsonData.data.payment).to.have.property('amount');",
									"    pm.expect(jsonData.data.payment).to.have.property('expires_at');",
									"});",
									"",
									"// Store booking and payment info for other tests",
									"const jsonData = pm.response.json();",
									"pm.environment.set('test_booking_id', jsonData.data.booking.id);",
									"pm.environment.set('payment_intent_id', jsonData.data.payment.payment_intent_id);",
									"pm.environment.set('client_secret', jsonData.data.payment.client_secret);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept-Language", "value": "en"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerInfo\": {\n    \"firstName\": \"Michael\",\n    \"lastName\": \"Johnson\",\n    \"email\": \"michael.johnson@example.com\",\n    \"phone\": \"+1-555-9876\",\n    \"country\": \"United States\"\n  },\n  \"pickupLocation\": \"Breathless Cancun Soul Resort & Spa - Main Lobby\",\n  \"dropoffLocation\": \"Cancun International Airport - Terminal 4 Departures\",\n  \"pickupDateTime\": \"2025-12-28T08:00:00\",\n  \"passengers\": 8,\n  \"serviceId\": 5,\n  \"serviceName\": \"One Way\",\n  \"currency\": \"USD\",\n  \"totalPrice\": 185.50,\n  \"specialRequests\": \"Large group with extra luggage. Please bring spacious vehicle. One passenger uses wheelchair. Need assistance with bags.\",\n  \"childSeats\": 3,\n  \"wheelchairAccessible\": true,\n  \"hotelReservationName\": \"Johnson Extended Family Holiday Group\",\n  \"fromLocationId\": 2,\n  \"toLocationId\": 1,\n  \"fromLocationType\": \"location\",\n  \"toLocationType\": \"airport\",\n  \"tripType\": \"departure\",\n  \"bookingDate\": \"2025-09-06T18:45:00\",\n  \"departureFlightInfo\": {\n    \"airline\": \"Delta Airlines\",\n    \"flightNumber\": \"DL1547\",\n    \"date\": \"2025-12-28\",\n    \"time\": \"11:30\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/bookings/create-with-payment",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings", "create-with-payment"]
						}
					}
				},
				{
					"name": "💶 Create Booking with Payment - EUR Currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('EUR booking with payment created', () => pm.response.to.have.status(201));",
									"pm.test('Currency is EUR', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.payment.currency).to.equal('eur');",
									"    pm.expect(jsonData.data.booking.pricing.currency).to.equal('EUR');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept-Language", "value": "es"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerInfo\": {\n    \"firstName\": \"Carlos\",\n    \"lastName\": \"García\",\n    \"email\": \"carlos.garcia@example.com\",\n    \"phone\": \"+34-91-123-4567\",\n    \"country\": \"Spain\"\n  },\n  \"pickupLocation\": \"Hotel Xcaret México - Main Lobby\",\n  \"dropoffLocation\": \"Playa del Carmen - Ferry Terminal\",\n  \"pickupDateTime\": \"2025-11-15T14:30:00\",\n  \"passengers\": 4,\n  \"serviceId\": 3,\n  \"serviceName\": \"Hotel to Hotel\",\n  \"currency\": \"EUR\",\n  \"totalPrice\": 125.75,\n  \"specialRequests\": \"Family vacation transfer. Please provide child seats.\",\n  \"childSeats\": 2,\n  \"wheelchairAccessible\": false,\n  \"hotelReservationName\": \"García Family Vacation\",\n  \"fromLocationId\": 15,\n  \"toLocationId\": 22,\n  \"fromLocationType\": \"location\",\n  \"toLocationType\": \"location\",\n  \"tripType\": \"hotel-to-hotel\",\n  \"bookingDate\": \"2025-09-06T19:00:00\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/bookings/create-with-payment",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings", "create-with-payment"]
						}
					}
				},
				{
					"name": "✈️ Create Booking with Payment - Airport Arrival with Flight Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Airport arrival booking created', () => pm.response.to.have.status(201));",
									"pm.test('Has flight information', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.booking.flight_info.arrival).to.be.an('object');",
									"    pm.expect(jsonData.data.booking.trip_details.type).to.equal('arrival');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept-Language", "value": "en"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerInfo\": {\n    \"firstName\": \"Sarah\",\n    \"lastName\": \"Wilson\",\n    \"email\": \"sarah.wilson@example.com\",\n    \"phone\": \"+1-555-2468\",\n    \"country\": \"Canada\"\n  },\n  \"pickupLocation\": \"Cancun International Airport - Terminal 2 Arrivals\",\n  \"dropoffLocation\": \"Grand Velas Riviera Maya - Resort Reception\",\n  \"pickupDateTime\": \"2025-10-20T16:15:00\",\n  \"passengers\": 2,\n  \"serviceId\": 2,\n  \"serviceName\": \"One Way\",\n  \"currency\": \"CAD\",\n  \"totalPrice\": 95.00,\n  \"specialRequests\": \"Honeymoon couple. Please monitor flight for delays.\",\n  \"childSeats\": 0,\n  \"wheelchairAccessible\": false,\n  \"hotelReservationName\": \"Wilson Honeymoon Suite\",\n  \"fromLocationId\": 1,\n  \"toLocationId\": 8,\n  \"fromLocationType\": \"airport\",\n  \"toLocationType\": \"location\",\n  \"tripType\": \"arrival\",\n  \"bookingDate\": \"2025-09-06T20:00:00\",\n  \"arrivalFlightInfo\": {\n    \"airline\": \"Air Canada\",\n    \"flightNumber\": \"AC1876\",\n    \"date\": \"2025-10-20\",\n    \"time\": \"16:00\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/bookings/create-with-payment",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings", "create-with-payment"]
						}
					}
				},
				{
					"name": "🌐 Frontend Format Test - Real Frontend Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Frontend format booking created successfully', () => pm.response.to.have.status(201));",
									"pm.test('Handles frontend data format', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.booking).to.have.property('booking_number');",
									"    pm.expect(jsonData.data.payment).to.have.property('client_secret');",
									"    pm.expect(jsonData.data.booking.service.name).to.equal('One Way'); // Mapped from 'standard private'",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept-Language", "value": "en"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerInfo\": {\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"phone\": \"+1-555-1234\",\n    \"country\": \"United States\"\n  },\n  \"pickupLocation\": \"Cancun Airport (CUN)\",\n  \"dropoffLocation\": \"Cancun Country Club\",\n  \"pickupDateTime\": \"2025-09-07T\",\n  \"passengers\": 1,\n  \"serviceId\": \"1\",\n  \"serviceName\": \"standard private\",\n  \"currency\": \"USD\",\n  \"totalPrice\": 20,\n  \"specialRequests\": \"Please be on time\",\n  \"arrivalFlightInfo\": {\n    \"airline\": \"American Airlines\",\n    \"flightNumber\": \"AA1234\",\n    \"date\": \"2025-09-23\",\n    \"time\": \"12:12\"\n  },\n  \"departureFlightInfo\": {\n    \"airline\": \"Delta Airlines\",\n    \"flightNumber\": \"DL5678\",\n    \"date\": \"2025-09-30\",\n    \"time\": \"21:32\"\n  },\n  \"childSeats\": 3,\n  \"wheelchairAccessible\": true,\n  \"hotelReservationName\": \"Doe Family Vacation\",\n  \"fromLocationId\": \"1\",\n  \"toLocationId\": \"3\",\n  \"fromLocationType\": \"airport\",\n  \"toLocationType\": \"zone\",\n  \"tripType\": \"arrival\",\n  \"bookingDate\": \"2025-09-07\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/bookings/create-with-payment",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings", "create-with-payment"]
						}
					}
				},
				{
					"name": "❌ Error Cases - One-Step Booking",
					"item": [
						{
							"name": "❌ Missing Required Customer Info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validation error 422', () => pm.response.to.have.status(422));",
											"pm.test('Has validation errors', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.false;",
											"    pm.expect(jsonData.errors).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{"key": "Content-Type", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"customerInfo\": {\n    \"firstName\": \"John\"\n  },\n  \"pickupLocation\": \"Some Hotel\",\n  \"currency\": \"USD\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/bookings/create-with-payment",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "bookings", "create-with-payment"]
								}
							}
						},
						{
							"name": "❌ Invalid Currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Currency validation error', () => pm.response.to.have.status(422));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{"key": "Content-Type", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"customerInfo\": {\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"email\": \"john@example.com\",\n    \"phone\": \"+1-555-0123\",\n    \"country\": \"United States\"\n  },\n  \"pickupLocation\": \"Beach Palace Cancun\",\n  \"dropoffLocation\": \"The Reef 28\",\n  \"pickupDateTime\": \"2025-11-15T10:30:00\",\n  \"passengers\": 4,\n  \"serviceName\": \"Round Trip\",\n  \"currency\": \"INVALID\",\n  \"totalPrice\": 150.00,\n  \"fromLocationId\": 1,\n  \"toLocationId\": 18,\n  \"fromLocationType\": \"location\",\n  \"toLocationType\": \"location\",\n  \"tripType\": \"round-trip\",\n  \"bookingDate\": \"2025-09-06T14:30:00\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/bookings/create-with-payment",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "bookings", "create-with-payment"]
								}
							}
						}
					]
				}
			]
		},
		{
			"name": "💳 Payment Integration - Stripe",
			"item": [
				{
					"name": "💳 Create Payment Intent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Payment intent created successfully', () => pm.response.to.have.status(200));",
									"pm.test('Response has client secret', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('client_secret');",
									"    pm.expect(jsonData.data).to.have.property('payment_intent_id');",
									"    pm.expect(jsonData.data).to.have.property('amount');",
									"    pm.expect(jsonData.data).to.have.property('currency');",
									"});",
									"",
									"// Store payment intent for other tests",
									"const jsonData = pm.response.json();",
									"pm.environment.set('payment_intent_id', jsonData.data.payment_intent_id);",
									"pm.environment.set('client_secret', jsonData.data.client_secret);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"booking_id\": \"{{test_booking_id}}\",\n  \"currency\": \"USD\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/create-payment-intent",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "create-payment-intent"]
						}
					}
				},
				{
					"name": "💰 Create Payment Intent - EUR Currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('EUR payment intent created', () => pm.response.to.have.status(200));",
									"pm.test('Currency is EUR', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.currency).to.equal('eur');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"booking_id\": \"{{test_booking_id}}\",\n  \"currency\": \"EUR\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/create-payment-intent",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "create-payment-intent"]
						}
					}
				},
				{
					"name": "📊 Get Payment Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Payment status retrieved', () => pm.response.to.have.status(200));",
									"pm.test('Has payment status data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('payment_status');",
									"    pm.expect(jsonData.data).to.have.property('booking_id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{"key": "Accept", "value": "application/json"}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/bookings/{{test_booking_id}}/payment-status",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings", "{{test_booking_id}}", "payment-status"]
						}
					}
				},
				{
					"name": "🔔 Stripe Webhook - Payment Succeeded",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Webhook processed successfully', () => pm.response.to.have.status(200));",
									"pm.test('Success response', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.equal('success');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Stripe-Signature", "value": "t=1609459200,v1=test_signature"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"evt_test_webhook\",\n  \"object\": \"event\",\n  \"api_version\": \"2020-08-27\",\n  \"created\": 1609459200,\n  \"data\": {\n    \"object\": {\n      \"id\": \"{{payment_intent_id}}\",\n      \"object\": \"payment_intent\",\n      \"amount\": 15000,\n      \"currency\": \"usd\",\n      \"status\": \"succeeded\",\n      \"metadata\": {\n        \"booking_id\": \"{{test_booking_id}}\"\n      }\n    }\n  },\n  \"livemode\": false,\n  \"pending_webhooks\": 1,\n  \"request\": {\n    \"id\": \"req_test\",\n    \"idempotency_key\": null\n  },\n  \"type\": \"payment_intent.succeeded\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/stripe/webhook",
							"host": ["{{base_url}}"],
							"path": ["stripe", "webhook"]
						}
					}
				},
				{
					"name": "❌ Payment Error Cases",
					"item": [
						{
							"name": "❌ Create Payment Intent - Invalid Booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Invalid booking error', () => pm.response.to.have.status(422));",
											"pm.test('Error message returned', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.false;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{"key": "Content-Type", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"booking_id\": \"99999\",\n  \"currency\": \"USD\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/create-payment-intent",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "create-payment-intent"]
								}
							}
						},
						{
							"name": "❌ Create Payment Intent - Invalid Currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Invalid currency error', () => pm.response.to.have.status(422));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{"key": "Content-Type", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"booking_id\": \"{{test_booking_id}}\",\n  \"currency\": \"INVALID\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/create-payment-intent",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "create-payment-intent"]
								}
							}
						},
						{
							"name": "❌ Payment Status - Booking Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Booking not found', () => pm.response.to.have.status(404));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/bookings/99999/payment-status",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "bookings", "99999", "payment-status"]
								}
							}
						}
					]
				}
			]
		},
		{
			"name": "🌐 i18n Language Testing",
			"item": [
				{
					"name": "Query Parameter Override (ES wins over EN header)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Spanish response (query param priority)', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('exitosamente');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [{"key": "Accept-Language", "value": "en"}],
						"url": {
							"raw": "{{base_url}}/api/v1/quote?locale=es&service_type=one-way&from_location_id=1&to_location_id=5&pax=2",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "quote"],
							"query": [
								{"key": "locale", "value": "es", "description": "Query param overrides header"},
								{"key": "service_type", "value": "one-way"},
								{"key": "from_location_id", "value": "1"},
								{"key": "to_location_id", "value": "5"},
								{"key": "pax", "value": "2"}
							]
						}
					}
				}
			]
		},
		{
			"name": "🏙️ Cities Management",
			"item": [
				{
					"name": "📋 Get All Cities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Cities retrieved successfully', () => pm.response.to.have.status(200));",
									"pm.test('Response has cities data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/cities",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "cities"]
						}
					}
				},
				{
					"name": "➕ Create City",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('City created successfully', () => pm.response.to.have.status(201));",
									"pm.test('Response has city data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test City\",\n  \"country\": \"Mexico\",\n  \"state\": \"Quintana Roo\",\n  \"timezone\": \"America/Cancun\",\n  \"is_active\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/cities",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "cities"]
						}
					}
				},
				{
					"name": "🔍 Get City Details",
					"request": {
						"method": "GET",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/cities/1",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "cities", "1"]
						}
					}
				},
				{
					"name": "📋 Get City with Full Details",
					"request": {
						"method": "GET",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/cities/1/details",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "cities", "1", "details"]
						}
					}
				},
				{
					"name": "🏨 Get City Locations",
					"request": {
						"method": "GET",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/cities/1/locations",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "cities", "1", "locations"]
						}
					}
				},
				{
					"name": "💰 Get City Rates",
					"request": {
						"method": "GET",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/cities/1/rates",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "cities", "1", "rates"]
						}
					}
				},
				{
					"name": "🌐 Get City Zones",
					"request": {
						"method": "GET",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/cities/1/zones",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "cities", "1", "zones"]
						}
					}
				},
				{
					"name": "✏️ Update City",
					"request": {
						"method": "PUT",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated City Name\",\n  \"is_active\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/cities/1",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "cities", "1"]
						}
					}
				},
				{
					"name": "🗑️ Delete City",
					"request": {
						"method": "DELETE",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/cities/1",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "cities", "1"]
						}
					}
				}
			]
		},
		{
			"name": "📍 Locations Management",
			"item": [
				{
					"name": "📋 Get All Locations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Locations retrieved successfully', () => pm.response.to.have.status(200));",
									"pm.test('Response has locations data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/locations",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "locations"]
						}
					}
				},
				{
					"name": "➕ Create Location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Location created successfully', () => pm.response.to.have.status(201));",
									"pm.test('Response has location data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Hotel\",\n  \"address\": \"Test Address 123\",\n  \"type\": \"H\",\n  \"city_id\": 1,\n  \"zone_id\": 1,\n  \"is_active\": true,\n  \"latitude\": 21.161785,\n  \"longitude\": -86.851528\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/locations",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "locations"]
						}
					}
				},
				{
					"name": "🏨 Get Locations by Type",
					"request": {
						"method": "GET",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/locations/type/H",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "locations", "type", "H"],
							"query": [
								{"key": "type", "value": "H", "description": "H=Hotel, A=Airport, Z=Zone", "disabled": true}
							]
						}
					}
				},
				{
					"name": "🔍 Get Location Details",
					"request": {
						"method": "GET",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/locations/1",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "locations", "1"]
						}
					}
				},
				{
					"name": "✏️ Update Location",
					"request": {
						"method": "PUT",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Hotel Name\",\n  \"address\": \"Updated Address\",\n  \"is_active\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/locations/1",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "locations", "1"]
						}
					}
				},
				{
					"name": "🗑️ Delete Location",
					"request": {
						"method": "DELETE",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/locations/1",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "locations", "1"]
						}
					}
				}
			]
		},
		{
			"name": "🌐 Zones Management",
			"item": [
				{
					"name": "📋 Get All Zones",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Zones retrieved successfully', () => pm.response.to.have.status(200));",
									"pm.test('Response has zones data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/zones",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "zones"]
						}
					}
				},
				{
					"name": "➕ Create Zone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Zone created successfully', () => pm.response.to.have.status(201));",
									"pm.test('Response has zone data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Zone\",\n  \"city_id\": 1,\n  \"is_active\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/zones",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "zones"]
						}
					}
				},
				{
					"name": "🔍 Get Zone Details",
					"request": {
						"method": "GET",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/zones/1",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "zones", "1"]
						}
					}
				},
				{
					"name": "✏️ Update Zone",
					"request": {
						"method": "PUT",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Zone Name\",\n  \"is_active\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/zones/1",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "zones", "1"]
						}
					}
				},
				{
					"name": "🗑️ Delete Zone",
					"request": {
						"method": "DELETE",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/zones/1",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "zones", "1"]
						}
					}
				}
			]
		},
		{
			"name": "💰 Enhanced Rates Management",
			"item": [
				{
					"name": "📋 Get All Rates (Enhanced)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Rates retrieved successfully', () => pm.response.to.have.status(200));",
									"pm.test('Response has rates data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/rates?per_page=20",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "rates"],
							"query": [
								{"key": "per_page", "value": "20", "description": "Items per page"}
							]
						}
					}
				},
				{
					"name": "➕ Create Rate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Rate created successfully', () => pm.response.to.have.status(201));",
									"pm.test('Response has rate data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"service_type_id\": 1,\n  \"vehicle_type_id\": 1,\n  \"from_zone_id\": 1,\n  \"to_zone_id\": 2,\n  \"total_one_way\": 85.00,\n  \"total_round_trip\": 160.00,\n  \"valid_from\": \"2025-01-01\",\n  \"valid_to\": \"2025-12-31\",\n  \"is_default\": false,\n  \"is_available\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/rates",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "rates"]
						}
					}
				},
				{
					"name": "🛣️ Get Route Rates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Route rates retrieved successfully', () => pm.response.to.have.status(200));",
									"pm.test('Response has route rates', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/rates/route?service_type_id=1&from_location_id=1&to_location_id=2&date=2025-12-25",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "rates", "route"],
							"query": [
								{"key": "service_type_id", "value": "1"},
								{"key": "from_location_id", "value": "1"},
								{"key": "to_location_id", "value": "2"},
								{"key": "date", "value": "2025-12-25"}
							]
						}
					}
				},
				{
					"name": "🌐 Get Zone Rates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Zone rates retrieved successfully', () => pm.response.to.have.status(200));",
									"pm.test('Response has zone rates', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/rates/zone?service_type_id=1&from_zone_id=1&to_zone_id=2&date=2025-12-25",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "rates", "zone"],
							"query": [
								{"key": "service_type_id", "value": "1"},
								{"key": "from_zone_id", "value": "1"},
								{"key": "to_zone_id", "value": "2"},
								{"key": "date", "value": "2025-12-25"}
							]
						}
					}
				},
				{
					"name": "🔍 Get Rate Details",
					"request": {
						"method": "GET",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/rates/1",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "rates", "1"]
						}
					}
				},
				{
					"name": "✏️ Update Rate",
					"request": {
						"method": "PUT",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"total_one_way\": 95.00,\n  \"total_round_trip\": 180.00,\n  \"is_available\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/rates/1",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "rates", "1"]
						}
					}
				},
				{
					"name": "🗑️ Delete Rate",
					"request": {
						"method": "DELETE",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/rates/1",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "rates", "1"]
						}
					}
				}
			]
		},
		{
			"name": "🚗 Vehicle Types Management",
			"item": [
				{
					"name": "📋 Get All Vehicle Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Vehicle types retrieved successfully', () => pm.response.to.have.status(200));",
									"pm.test('Response has vehicle types data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/vehicle-types",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "vehicle-types"]
						}
					}
				},
				{
					"name": "➕ Create Vehicle Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Vehicle type created successfully', () => pm.response.to.have.status(201));",
									"pm.test('Response has vehicle type data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Luxury SUV\",\n  \"code\": \"LUXURY_SUV\",\n  \"capacity\": 8,\n  \"description\": \"Premium luxury SUV for special occasions\",\n  \"is_active\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/vehicle-types",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "vehicle-types"]
						}
					}
				},
				{
					"name": "🔍 Get Vehicle Type Details",
					"request": {
						"method": "GET",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/vehicle-types/1",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "vehicle-types", "1"]
						}
					}
				},
				{
					"name": "✏️ Update Vehicle Type",
					"request": {
						"method": "PUT",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Vehicle Name\",\n  \"capacity\": 10,\n  \"is_active\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/vehicle-types/1",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "vehicle-types", "1"]
						}
					}
				},
				{
					"name": "🗑️ Delete Vehicle Type",
					"request": {
						"method": "DELETE",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/vehicle-types/1",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "vehicle-types", "1"]
						}
					}
				}
			]
		},
		{
			"name": "⭐ Service Features Management",
			"item": [
				{
					"name": "📋 Get All Service Features",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Service features retrieved successfully', () => pm.response.to.have.status(200));",
									"pm.test('Response has service features data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/service-features",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "service-features"]
						}
					}
				},
				{
					"name": "➕ Create Service Feature",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Service feature created successfully', () => pm.response.to.have.status(201));",
									"pm.test('Response has service feature data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Wi-Fi Available\",\n  \"code\": \"WIFI\",\n  \"description\": \"Complimentary Wi-Fi internet access during the trip\",\n  \"is_active\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/service-features",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "service-features"]
						}
					}
				},
				{
					"name": "🔍 Get Service Feature Details",
					"request": {
						"method": "GET",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/service-features/1",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "service-features", "1"]
						}
					}
				},
				{
					"name": "✏️ Update Service Feature",
					"request": {
						"method": "PUT",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Feature Name\",\n  \"description\": \"Updated description\",\n  \"is_active\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/service-features/1",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "service-features", "1"]
						}
					}
				},
				{
					"name": "🗑️ Delete Service Feature",
					"request": {
						"method": "DELETE",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/service-features/1",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "service-features", "1"]
						}
					}
				}
			]
		},
		{
			"name": "📞 Contact Management",
			"item": [
				{
					"name": "📧 Submit Contact Form (Auto-Sends 2 Emails!)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Contact form submitted successfully', () => pm.response.to.have.status(201));",
									"pm.test('Response has contact data and reference number', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('contact_id');",
									"    pm.expect(jsonData.data).to.have.property('reference_number');",
									"    pm.expect(jsonData.data).to.have.property('message');",
									"    pm.expect(jsonData.data.reference_number).to.match(/^CT\\d{6}$/);",
									"});",
									"",
									"pm.test('Email notifications triggered', function () {",
									"    const jsonData = pm.response.json();",
									"    const refNumber = jsonData.data.reference_number;",
									"    ",
									"    console.log('📧 Contact Form Submitted Successfully!');",
									"    console.log('🔢 Reference Number: ' + refNumber);",
									"    console.log('');",
									"    console.log('📨 EMAIL 1: Admin Notification');",
									"    console.log('   To: irveloper@gmail.com');",
									"    console.log('   Subject: \"New Contact Form Submission - Inquiry about airport transfers\"');",
									"    console.log('   Contains: Full contact details, message, reference number');",
									"    console.log('');",
									"    console.log('🤖 EMAIL 2: Customer Auto-Reply');",
									"    console.log('   To: sarah.traveler@example.com');",
									"    console.log('   Subject: \"Thank you for contacting FiveStars Transport\"');",
									"    console.log('   Contains: Professional auto-reply, services info, reference number');",
									"    console.log('');",
									"    console.log('📬 Check both email inboxes! (and spam folders)');",
									"});",
									"",
									"// Store contact ID for other tests",
									"const jsonData = pm.response.json();",
									"if (jsonData.data && jsonData.data.contact_id) {",
									"    pm.environment.set('test_contact_id', jsonData.data.contact_id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Sarah Traveler\",\n  \"email\": \"sarah.traveler@example.com\",\n  \"phone\": \"+1-555-TRAVEL\",\n  \"subject\": \"Inquiry about airport transfers\",\n  \"message\": \"Hi! My family and I are planning a vacation to Cancun in December. We'll be arriving at the airport on December 20th around 3 PM and need transportation to our hotel (Hyatt Ziva Cancun). We're a family of 4 (2 adults, 2 children aged 8 and 12) with 6 suitcases. Could you please provide a quote for round-trip transportation? Also, do you provide child car seats? Thank you!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/contact",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "contact"]
						}
					}
				},
				{
					"name": "📧 Contact Form - Business Inquiry (Test Different Subject)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Business inquiry submitted successfully', () => pm.response.to.have.status(201));",
									"pm.test('Different subject generates different emails', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    ",
									"    console.log('📧 Business Contact Form Submitted!');",
									"    console.log('🔢 Reference: ' + jsonData.data.reference_number);",
									"    console.log('');",
									"    console.log('📨 Admin Email Subject: \"New Contact Form Submission - Partnership Inquiry\"');",
									"    console.log('🤖 Customer Auto-Reply: Same professional template');",
									"    console.log('📬 Check emails for this business inquiry!');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Carlos Rodriguez\",\n  \"email\": \"carlos.hotel@example.com\",\n  \"phone\": \"+52-998-123-4567\",\n  \"subject\": \"Partnership Inquiry\",\n  \"message\": \"Hello, I represent Hotel Excellence Playa Mujeres and we're interested in establishing a partnership for guest transportation services. We have 300+ rooms and receive guests daily who need reliable airport transfers. Could we schedule a call to discuss volume rates and service agreements? Best regards, Carlos Rodriguez - Guest Services Manager\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/contact",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "contact"]
						}
					}
				},
				{
					"name": "📋 Get All Contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Contacts retrieved successfully', () => pm.response.to.have.status(200));",
									"pm.test('Response has contacts data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/contacts",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "contacts"]
						}
					}
				},
				{
					"name": "📊 Get Contact Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Contact stats retrieved successfully', () => pm.response.to.have.status(200));",
									"pm.test('Response has stats data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('total_contacts');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/contacts/stats",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "contacts", "stats"]
						}
					}
				},
				{
					"name": "🔍 Get Contact Details",
					"request": {
						"method": "GET",
						"header": [{"key": "Accept", "value": "application/json"}],
						"url": {
							"raw": "{{base_url}}/api/v1/contacts/1",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "contacts", "1"]
						}
					}
				},
				{
					"name": "✏️ Update Contact Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Contact status updated successfully', () => pm.response.to.have.status(200));",
									"pm.test('Response shows updated status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"responded\",\n  \"notes\": \"Customer inquiry handled via email\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/contacts/1/status",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "contacts", "1", "status"]
						}
					}
				},
				{
					"name": "🎉 Submit Group Quote Request (Auto-Sends 2 Emails!)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Group quote request submitted successfully', () => pm.response.to.have.status(201));",
									"pm.test('Response has group quote data and reference number', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('contact_id');",
									"    pm.expect(jsonData.data).to.have.property('reference_number');",
									"    pm.expect(jsonData.data).to.have.property('message');",
									"    pm.expect(jsonData.data.reference_number).to.match(/^GQ\\d{6}$/);",
									"});",
									"",
									"pm.test('Group quote email notifications triggered', function () {",
									"    const jsonData = pm.response.json();",
									"    const refNumber = jsonData.data.reference_number;",
									"    ",
									"    console.log('🎉 Group Quote Request Submitted Successfully!');",
									"    console.log('🔢 Reference Number: ' + refNumber);",
									"    console.log('👥 Group Size: 25 passengers');",
									"    console.log('📅 Event Date: December 15, 2025');",
									"    console.log('🚌 Service Type: Wedding Transportation');",
									"    console.log('');",
									"    console.log('📨 EMAIL 1: Admin Notification (Priority Group Quote)');",
									"    console.log('   To: irveloper@gmail.com');",
									"    console.log('   Subject: \"New Group Quote Request - Wedding Transportation\"');",
									"    console.log('   Contains: Group details, event info, contact data, reference number');",
									"    console.log('   Priority: HIGH (Large group booking)');",
									"    console.log('');",
									"    console.log('🤖 EMAIL 2: Customer Auto-Reply');",
									"    console.log('   To: wedding.planner@example.com');",
									"    console.log('   Subject: \"Thank you for your Group Quote Request - FiveStars Transport\"');",
									"    console.log('   Contains: Group quote summary, timeline, next steps, reference number');",
									"    console.log('');",
									"    console.log('⏰ Expected Response: Quote within 24 hours for groups');",
									"    console.log('📞 Follow-up: Call within 2 hours for groups over 20 passengers');",
									"    console.log('📬 Check both email inboxes! (and spam folders)');",
									"});",
									"",
									"// Store group quote contact ID for other tests",
									"const jsonData = pm.response.json();",
									"if (jsonData.data && jsonData.data.contact_id) {",
									"    pm.environment.set('test_group_quote_id', jsonData.data.contact_id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"contact_name\": \"Emily Wedding Planner\",\n  \"email\": \"wedding.planner@example.com\",\n  \"phone\": \"+1-555-WEDDING\",\n  \"group_size\": 25,\n  \"event_date\": \"2025-12-15\",\n  \"service_type\": \"Wedding Transportation\",\n  \"event_details\": \"Premium wedding transportation for 25 guests. Need round-trip service from Hilton Cancun All-Inclusive Resort to Dreams Vista Cancun Golf & Spa Resort for ceremony and reception. Wedding ceremony at 4 PM, reception until 11 PM. Require elegant, clean vehicles suitable for formal attire. Some elderly guests need easy access vehicles. Please include champagne service if available. Very important day - need reliable, punctual service with professional drivers.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/contact/group-quote",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "contact", "group-quote"]
						}
					}
				},
				{
					"name": "🏢 Corporate Group Quote Request (Large Group)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Corporate group quote submitted successfully', () => pm.response.to.have.status(201));",
									"pm.test('Large group validation works', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    ",
									"    console.log('🏢 Corporate Group Quote Submitted!');",
									"    console.log('🔢 Reference: ' + jsonData.data.reference_number);",
									"    console.log('👥 Large Group: 50 passengers (max capacity test)');",
									"    console.log('📋 Service: Corporate Event Transportation');",
									"    console.log('📧 Check emails for this large corporate group request!');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"contact_name\": \"David Corporate Events\",\n  \"email\": \"david.events@techcorp.com\",\n  \"phone\": \"+1-555-CORP-123\",\n  \"group_size\": 50,\n  \"event_date\": \"2025-11-20\",\n  \"service_type\": \"Corporate Event Transportation\",\n  \"event_details\": \"Annual corporate retreat transportation for 50 employees. Need transportation from Cancun International Airport to Moon Palace Resort. Arriving on multiple flights between 2 PM - 6 PM. Require professional service with uniformed drivers. Some VIP executives need premium vehicles. All employees have business casual dress code. Need reliable coordination for staggered arrivals.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/contact/group-quote",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "contact", "group-quote"]
						}
					}
				},
				{
					"name": "❌ Group Quote - Validation Errors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validation errors returned correctly', () => pm.response.to.have.status(422));",
									"pm.test('Response shows validation errors', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include('Validation failed');",
									"    pm.expect(jsonData.errors).to.be.an('object');",
									"    ",
									"    console.log('❌ Validation Test Results:');",
									"    console.log('Event Date Error: ' + JSON.stringify(jsonData.errors.event_date));",
									"    console.log('Group Size Error: ' + JSON.stringify(jsonData.errors.group_size));",
									"    console.log('Email Error: ' + JSON.stringify(jsonData.errors.email));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"contact_name\": \"A\",\n  \"email\": \"invalid-email\",\n  \"group_size\": 0,\n  \"event_date\": \"2024-01-01\",\n  \"service_type\": \"\",\n  \"event_details\": \"Too short\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/contact/group-quote",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "contact", "group-quote"]
						}
					}
				}
			]
		},
		{
			"name": "🔧 Additional Payment Endpoints",
			"item": [
				{
					"name": "💳 Create Payment Intent for Existing Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Payment intent created for booking', () => pm.response.to.have.status(200));",
									"pm.test('Response has payment intent data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('client_secret');",
									"    pm.expect(jsonData.data).to.have.property('payment_intent_id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currency\": \"USD\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/bookings/{{test_booking_id}}/payment-intent",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "bookings", "{{test_booking_id}}", "payment-intent"]
						}
					}
				}
			]
		},
		{
			"name": "🛠️ Debug & Development Tools",
			"item": [
				{
					"name": "🔍 Debug Service Mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Debug service mapping works', () => pm.response.to.have.status(200));",
									"pm.test('Response has debug data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.debug).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Accept", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerInfo\": {\n    \"firstName\": \"Debug\",\n    \"lastName\": \"Test\",\n    \"email\": \"debug@example.com\",\n    \"phone\": \"+1-555-DEBUG\",\n    \"country\": \"United States\"\n  },\n  \"pickupLocation\": \"Test Location\",\n  \"dropoffLocation\": \"Test Destination\",\n  \"pickupDateTime\": \"2025-12-25T10:00:00\",\n  \"passengers\": 2,\n  \"serviceName\": \"standard private\",\n  \"currency\": \"USD\",\n  \"totalPrice\": 100.00,\n  \"fromLocationId\": 1,\n  \"toLocationId\": 2,\n  \"fromLocationType\": \"airport\",\n  \"toLocationType\": \"location\",\n  \"tripType\": \"arrival\",\n  \"bookingDate\": \"2025-09-10T12:00:00\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/debug/service-mapping",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "debug", "service-mapping"]
						}
					}
				},
				{
					"name": "📧 Test Email Functionality",
					"item": [
						{
							"name": "📧 Test Booking Confirmation Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Email test successful', () => pm.response.to.have.status(200));",
											"pm.test('Response confirms email sent', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"    pm.expect(jsonData.message).to.include('successfully');",
											"    pm.expect(jsonData.email_sent_to).to.be.a('string');",
											"    pm.expect(jsonData.email_type).to.equal('booking');",
											"});",
											"",
											"pm.test('Check your email inbox', function () {",
											"    const jsonData = pm.response.json();",
											"    console.log('📬 Email sent to: ' + jsonData.email_sent_to);",
											"    console.log('📧 Type: ' + jsonData.email_type);",
											"    console.log('✅ Check your inbox (and spam folder) for the test email!');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{"key": "Content-Type", "value": "application/json"},
									{"key": "Accept", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"your-email@example.com\",\n  \"type\": \"booking\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/debug/test-email",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "debug", "test-email"]
								}
							}
						},
						{
							"name": "📧 Test Booking Email with Existing Booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Email test with existing booking successful', () => pm.response.to.have.status(200));",
											"pm.test('Response confirms email sent', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"    pm.expect(jsonData.message).to.include('successfully');",
											"    pm.expect(jsonData.email_sent_to).to.be.a('string');",
											"    pm.expect(jsonData.email_type).to.equal('booking');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{"key": "Content-Type", "value": "application/json"},
									{"key": "Accept", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"your-email@example.com\",\n  \"type\": \"booking\",\n  \"booking_id\": \"{{test_booking_id}}\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/debug/test-email",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "debug", "test-email"]
								}
							}
						},
						{
							"name": "📞 Test Contact Auto-Reply Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Contact email test successful', () => pm.response.to.have.status(200));",
											"pm.test('Response confirms contact email sent', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"    pm.expect(jsonData.message).to.include('Contact auto-reply');",
											"    pm.expect(jsonData.email_sent_to).to.be.a('string');",
											"    pm.expect(jsonData.email_type).to.equal('contact');",
											"});",
											"",
											"pm.test('Check your email for auto-reply', function () {",
											"    const jsonData = pm.response.json();",
											"    console.log('📬 Contact auto-reply sent to: ' + jsonData.email_sent_to);",
											"    console.log('🤖 This tests the contact form auto-reply email template');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{"key": "Content-Type", "value": "application/json"},
									{"key": "Accept", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"your-email@example.com\",\n  \"type\": \"contact\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/debug/test-email",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "debug", "test-email"]
								}
							}
						},
						{
							"name": "🔍 Email Template Preview",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Email preview generated successfully', () => pm.response.to.have.status(200));",
											"pm.test('Response has preview content', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"    pm.expect(jsonData.template_type).to.equal('booking');",
											"    pm.expect(jsonData).to.have.property('html_preview');",
											"    pm.expect(jsonData.html_preview).to.be.a('string');",
											"});",
											"",
											"pm.test('HTML preview contains content', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.html_preview.length).to.be.above(100);",
											"    console.log('📧 Email template preview generated successfully');",
											"    console.log('📏 HTML content length: ' + jsonData.html_preview.length + ' characters');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{"key": "Content-Type", "value": "application/json"},
									{"key": "Accept", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"booking\",\n  \"format\": \"html\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/debug/preview-email",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "debug", "preview-email"]
								}
							}
						},
						{
							"name": "📊 Email System Status Dashboard",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Email system status retrieved', () => pm.response.to.have.status(200));",
											"pm.test('Response has comprehensive system status', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"    pm.expect(jsonData).to.have.property('system_status');",
											"    pm.expect(jsonData).to.have.property('mail_configuration');",
											"    pm.expect(jsonData).to.have.property('email_templates');",
											"    pm.expect(jsonData).to.have.property('database_status');",
											"});",
											"",
											"pm.test('Mail configuration is present', function () {",
											"    const jsonData = pm.response.json();",
											"    const config = jsonData.mail_configuration;",
											"    pm.expect(config).to.have.property('driver');",
											"    pm.expect(config).to.have.property('sendgrid_configured');",
											"    ",
											"    console.log('📧 Mail Driver: ' + config.driver);",
											"    console.log('🌐 SendGrid: ' + (config.sendgrid_configured ? '✅ Configured' : '❌ Not configured'));",
											"    console.log('🔧 Queue Driver: ' + config.queue_driver);",
											"});",
											"",
											"pm.test('Email templates status', function () {",
											"    const jsonData = pm.response.json();",
											"    const templates = jsonData.email_templates;",
											"    ",
											"    console.log('📄 Email Templates:');",
											"    Object.keys(templates).forEach(template => {",
											"        const status = templates[template];",
											"        console.log(`  ${template}: HTML=${status.html} Text=${status.text} Class=${status.class}`);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{"key": "Accept", "value": "application/json"}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/debug/email-status",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "debug", "email-status"]
								}
							}
						},
						{
							"name": "📮 Bulk Email Testing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Bulk email test completed', () => pm.response.to.have.status(200));",
											"pm.test('Response has bulk test results', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('summary');",
											"    pm.expect(jsonData).to.have.property('results');",
											"    pm.expect(jsonData.results).to.be.an('array');",
											"    pm.expect(jsonData.summary).to.have.property('total_emails');",
											"    pm.expect(jsonData.summary).to.have.property('successful');",
											"    pm.expect(jsonData.summary).to.have.property('failed');",
											"    pm.expect(jsonData.summary).to.have.property('success_rate');",
											"});",
											"",
											"pm.test('Display bulk test results', function () {",
											"    const jsonData = pm.response.json();",
											"    const summary = jsonData.summary;",
											"    ",
											"    console.log('📮 Bulk Email Test Results:');",
											"    console.log(`📧 Total Emails: ${summary.total_emails}`);",
											"    console.log(`✅ Successful: ${summary.successful}`);",
											"    console.log(`❌ Failed: ${summary.failed}`);",
											"    console.log(`📊 Success Rate: ${summary.success_rate}`);",
											"    ",
											"    jsonData.results.forEach(result => {",
											"        const status = result.status === 'sent' ? '✅' : '❌';",
											"        console.log(`${status} ${result.email}: ${result.message}`);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{"key": "Content-Type", "value": "application/json"},
									{"key": "Accept", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"emails\": [\n    \"test1@example.com\",\n    \"test2@example.com\",\n    \"test3@example.com\"\n  ],\n  \"type\": \"booking\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/debug/bulk-test-email",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "debug", "bulk-test-email"]
								}
							}
						},
						{
							"name": "❌ Test Email - Invalid Parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validation error for invalid email', () => pm.response.to.have.status(422));",
											"pm.test('Response has validation errors', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('errors');",
											"    pm.expect(jsonData.errors).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{"key": "Content-Type", "value": "application/json"},
									{"key": "Accept", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"invalid-email-format\",\n  \"type\": \"invalid-type\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/debug/test-email",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "debug", "test-email"]
								}
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('=== FiveStars API Test Suite ===');",
					"console.log('URL:', pm.request.url.toString());",
					"console.log('Method:', pm.request.method);",
					"",
					"// Add common headers",
					"pm.request.headers.add({",
					"    key: 'User-Agent',",
					"    value: 'FiveStars-API-Test-Suite/2.0'",
					"});",
					"",
					"// Set request timestamp",
					"pm.environment.set('request_timestamp', new Date().toISOString());",
					"",
					"// Auto-set base URL if not set",
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'http://localhost');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"console.log('=== RESPONSE ===');",
					"console.log(`Status: ${pm.response.code} ${pm.response.status}`);",
					"console.log(`Time: ${pm.response.responseTime}ms`);",
					"",
					"// Performance test",
					"pm.test('Response time is reasonable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(10000);",
					"});",
					"",
					"// Content type test",
					"pm.test('Content-Type is JSON', function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});",
					"",
					"// Standard response structure test (for successful responses)",
					"if (pm.response.code >= 200 && pm.response.code < 300) {",
					"    pm.test('Response has standard structure', function () {",
					"        const jsonData = pm.response.json();",
					"        pm.expect(jsonData).to.have.property('success');",
					"        pm.expect(jsonData).to.have.property('message');",
					"        pm.expect(jsonData).to.have.property('timestamp');",
					"        pm.expect(jsonData).to.have.property('request_id');",
					"    });",
					"}",
					"",
					"// Error response structure test",
					"if (pm.response.code >= 400) {",
					"    pm.test('Error response has proper structure', function () {",
					"        const jsonData = pm.response.json();",
					"        pm.expect(jsonData).to.have.property('success');",
					"        pm.expect(jsonData.success).to.be.false;",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost",
			"type": "string",
			"description": "Base API URL - Update to your server address"
		},
		{
			"key": "compare_from",
			"value": "1",
			"type": "string"
		},
		{
			"key": "compare_to",
			"value": "18",
			"type": "string"
		},
		{
			"key": "compare_pax",
			"value": "4",
			"type": "string"
		},
		{
			"key": "default_price",
			"value": "0",
			"type": "string"
		},
		{
			"key": "test_booking_id",
			"value": "1",
			"type": "string",
			"description": "Booking ID for testing update/delete operations"
		},
		{
			"key": "test_booking_number",
			"value": "FS-2025-000001",
			"type": "string",
			"description": "Booking number for reference"
		},
		{
			"key": "payment_intent_id",
			"value": "pi_test_example",
			"type": "string",
			"description": "Stripe payment intent ID for testing"
		},
		{
			"key": "client_secret",
			"value": "pi_test_example_secret",
			"type": "string",
			"description": "Stripe client secret for frontend"
		}
	]
}